exit
LineReminderJob.set(wait_until: remind_time).perform_later
remind_time = Reminder.extract_remind_time
exit
remind_time = Reminder.extract_remind_time(event)
    if remind_time && Time.now >= remind_time
      p  "指定した時間です！今日あった出来事などを日記に書きましょう！"
    end  
def send_reminder(event)
    remind_time = Reminder.extract_remind_time(event)
    if remind_time && Time.now >= remind_time
      p  "指定した時間です！今日あった出来事などを日記に書きましょう！"
    end
  end
remind_time = Reminder.extract_remind_time(event)
Time.now
current_time = Time.now + 9.hours
remind_time = Reminder.extract_remind_time(event)
exit
remind_time && Time.now <= remind_time
remind_time && Time.now =< remind_time
remind_time && Time.now =<  remind_time
remind_time && Time.now >= remind_time
remind_time = Reminder.extract_remind_time(event)
exit
Time.now
if remind_time && Time.now >= remind_time
      reply_text(event, "指定した時間です！今日あった出来事などを日記に書きましょう！")
    end
remind_time = Reminder.extract_remind_time(event)
exit
remind_time = Reminder.extract_remind_time(event)
exit
Time.now
remind_time = Reminder.extract_remind_time(event)
reminders = Reminder.tell_recent_reminders(10)
exit
reminders = Reminder.tell_recent_reminders(10)
remind_time = Reminder.extract_remind_time(event)
exit
reminders = Reminder.tell_recent_reminders(10)
remind_time = Reminder.extract_remind_time(event)
exit
remind_time = Reminder.extract_remind_time(event)
reminders = Reminder.tell_recent_reminders(10)
exit
remind_time = Reminder.extract_remind_time(event)
exit
remind_time = Reminder.extract_remind_time(event)
reminders = Reminder.tell_recent_reminders(10)
remind_time = Reminder.extract_remind_time(event)
exit
remind_time = Reminder.extract_remind_time(event)
reminders = Reminder.tell_recent_reminders(10)reminders = Reminder.tell_recent_reminders(10)
remind_time = Reminder.extract_remind_time(event)
exit
@user&.deliver_reset_password_instructions!
def deliver_reset_password_instructions!
  mail = false
  config = sorcery_config
config = sorcery_config
self.class.sorcery_adapter.transaction do
              generate_reset_password_token!
              mail = send_reset_password_email! unless config.reset_password_mailer_disabled
            end
mail = false
@user&.deliver_reset_password_instructions!
            endexit
              mail = send_reset_password_email! unless config.reset_password_mailer_disabled
              generate_reset_password_token!
self.class.sorcery_adapter.transaction do
@user&.deliver_reset_password_instructions!@user&.deliver_reset_password_instructions!
exit
@today_diary
@today_diary.present?
@today_diary.exists?(created_at: Date.today.beginning_of_day..Date.today.end_of_day)
@today_diary = current_user.diaries.find_by(created_at: Date.today.beginning_of_day..Date.today.end_of_day)
exit
@today_diary.exists?(created_at: Date.today.beginning_of_day..Date.today.end_of_day)
@today_diary = current_user.diaries.find_by(created_at: Date.today.beginning_of_day..Date.today.end_of_day)
@today_diary = @mydiaries.where(created_at: Date.today.beginning_of_day..Date.today.end_of_day)
Date.today
@mydiaries.where(created_at: Date.today)
@mydiaries = current_user.diaries.includes(:user, :stress_diagnosis, :happy_diagnosis).order(created_at: :desc)
@today_diary = current_user.diaries.find_by(created_at: Date.today)
exit
@mydiaries.exists?(created_at: Date.today)
@mydiaries = current_user.diaries.includes(:user, :stress_diagnosis, :happy_diagnosis).order(created_at: :desc)
exit
Date.today
exit
current_user.diaries.exists?(created_at: Date.today)
exit
current_user.diaries.exists?(created_at: Date.today)current_user.diaries.exists?(created_at: Date.today)current_user.diaries.exists?(created_at: Date.today)
exit
reminder_list = reminders.join("\n")
exit
reminder = reminders.join(',')
exit
reminders = Reminder.tell_recent_reminders(10)
exit
remind_times
reply_text(event, remind_times.join("\n"))
remind_times.join("\n")
exit
remind_times.join("\n")
remind_times
recent_reminders.reverse_each do |remind_time|
                remind_times << remind_time.strftime('%Y-%m-%d %H:%M')
              end
remind_times = []
recent_reminders = Reminder.get_recent_reminders(10)
exit
recent_reminders.each_with_index do |remind_time, index|
                response += "#{index + 1}. #{remind_time.strftime('%Y-%m-%d %H:%M')}\n"
              end
response = "過去のリマインダーの時間は:\n"
              recent_reminders.each_with_index do |remind_time, index|
                response += "#{index + 1}. #{remind_time.strftime('%Y-%m-%d %H:%M')}\n"
              end
reply_text(event, "過去に設定したリマインダーはありません。")
reply_text(event, response)
response = "過去に設定したリマインダーはありません。"
reply_text(event, response)
response = "過去のリマインダーの時間は:\n"
              recent_reminders.each_with_index do |remind_time, index|
                response += "#{index + 1}. #{remind_time.strftime('%Y-%m-%d %H:%M')}\n"
              end
recent_reminders.any?
if recent_reminders.any?
              response = "過去のリマインダーの時間は:\n"
              recent_reminders.each_with_index do |remind_time, index|
                response += "#{index + 1}. #{remind_time.strftime('%Y-%m-%d %H:%M')}\n"
              end
            else
              response = "過去に設定したリマインダーはありません。"
            end
recent_reminders = Reminder.get_recent_reminders(10)
exit
<% @users.each do |user| %>
            <% name, id = user %>
            <option value="<%= "#{user.name} (ID: #{user.id})" %>"></option>
          <% end %>
exit
@stress_datas
exit
@stress_datas
exit
@happy_datas
exit
@happy_datas.each { |date, rows| puts "#{date} の幸福値: #{rows.sum(&:happy_count)}" }
@happy_datas
exit
@mean_comment = current_user.mean_comments.find(params[:id])
exit
params[:id]
@mean_comment = current_user.mean_comments.find(params[:id])
exit
@mean = Mean.find(params[:mean_id])
@mean = Mean.find(params[:id])
@mean_comment.destroy!
@mean_comment = current_user.mean_comments.find(params[:id])
exit
@mean_comment = current_user.mean_comments.find(params[:id])
exit
@mean = Mean.find(params[:id])
params[:id]
@mean_comment = current_user.mean_comments.find(params[:id])
exit
params
@mean_comment = current_user.mean_comments.find(params[:id])
params[:id] = "16"
params[:mean_id] = "31"
params[:mean_id]
@mean_comment = current_user.mean_comments.find(params[:id])
exit
@mean = current_user.means.find(params[:mean_id])
params[:mean_id]
@mean_comment = current_user.mean_comments.new(mean_comment_params)
exit
@mean_comment = current_user.mean_comments.new(mean_comment_params)
@mean = Mean.find(31)
exit
@mean = Mean.find(31)
@mean = current_user.means.find(params[:id])
@mean_comment = current_user.mean_comments.new(mean_comment_params)
exit
@mean_comment = @mean.mean_comments.find(params[:mean_id])
@mean = current_user.means.find(params[:id])
exit
@mean_comment = @mean.mean_comments.find(params[:meant_id])
@mean_comment = @mean.mean_comments.find(params[:mean_comment_id])
@mean = current_user.means.find(params[:id])
exit
@mean = current_user.means.find(params[:id])
@mean
exit
@report.reported_id = @user.id
@report.reporter_id = current_user.id
@report = Report.new(report_params)
@user = User.find(params[:user_id])
exit
@user = User.find(params[:user_id])
exit
@user.id
@user = User.find(params[:user_id])
@report = Report.new
params[:user_id]
new_report_path(user_id: @user.id)
user_id: @user.id
exit
user
@user = User.find(params[:id])
@report.reported_id = @user.id
@report.reporter_id = current_user.id
@report = Report.new(report_params)
@reports
exit
@m = Mean.ransack(params[:m])
@means
exit
@means
exit
@mean_comment = @mean.mean_comments.find(params[:mean_id])
params[:mean_id]
params[:id]
mean_comments
@mean_comment.id
@mean_comment = @mean.mean_comments.find(3)
@mean.mean_comments.find(3)
@mean.mean_comments
@mean_comment = @mean.mean_comments.find(params[:id])
@mean = current_user.means.find(params[:id])
exit
@mean_comment = @mean.mean_comments.find(params[:id])
@mean = current_user.means.find(params[:id])
@mean = Mean.find(params[:id])
@mean_comment = current_user.mean_comments.find(params[:id])
@mean_comment
exit
@user_like_ranks = @users.order(total_like_counts: :desc).limit(10)
/Users/inagakiyuya/workspace/pf/stressdiary 
exit
@users.each do |user|
      user.total_like_counts = user.total_likes
    end
@users.each do |user|
@users = User.all
exit
@users.each do |user|
      user.total_like_counts = user.total_likes
    end
exit
@users = User.joins(means: :likes).group('users.id').order('COUNT(likes.id) DESC')
exit
total_like_counts
